	-----------------------------------------------------------------------------------------------------------------
	************************** TUPLAS, OPERADOR TERNÁRIO E DESCONTRUÇÃO DE OBJETO COM C# ****************************
	-----------------------------------------------------------------------------------------------------------------
	
	TUPLAS
	
	É uma coleção , que pode ter difrentes tipos
	
	(int Id, string Nome, string Sobrenome, decimal Altura) tupla = (1, "William", "Fontelas", 1.87M);
	
	Console.WriteLine($"Id: {tupla.Id}");
	Console.WriteLine($"Nome: {tupla.Nome}");
	Console.WriteLine($"Sobrenome :{tupla.Sobrenome}");
	Console.WriteLine($"Altura: {tupla.Altura}");
	------------------------------------------------------------------------------------------------------------------
	OUTRA SINTAXE DA TUPLA
	
	OBS: porém, pela legibilidade de poder nomear os tipos ,fica mais viavel usar o primeiro exemplo , mas podemos encontrar as Tuplas dessa forma em códigos de terceiros.
	
	ValueTuple<int, string, string, decimal> outroExemploTupla = (1, "William", "Fontelas", 1.87M);
	var outroExemploTuplaCreate = Tuple.Create(1, "William", "Fontelas", 1.87M);
	
	------------------------------------------------------------------------------------------------------------------	
	TUPLA EM MÉTODOS
	
	Vc também pode ter um Metodo que retorna uma Tupla 
	
	Vamos criar uma nova classe na pasta Models e nomea-lá de LeituraArquivo
	
		public (bool Sucesso, string[] Linhas, int QuantidadeLinhas) LerArquivo(string caminho)
        {
            try
            {
                string[] linhas = File.ReadAllLines(caminho);
                return(true, linhas, linhas.Count());
            }
            catch (Exception)
            {
                
                return(false, new string[0], 0);
            }
        }
		
	------------------------------------------------------------------------------------------------------------------
	TESTANDO NOSSO MÉTODOS
	
	Na classe Program:
	
	LeituraArquivo arquivo = new LeituraArquivo();

	var (sucesso, linhasArquivo, quantidadeLinhas) = arquivo.LerArquivo("Arquivo/arquivoLeitura.txt");

	if(sucesso)
	{
		Console.WriteLine("Quantidade de linhas do arquivo: " + quantidadeLinhas);
		foreach (string linha in linhasArquivo)
		{
			Console.WriteLine(linha);
		}
	}
	else
	{
		Console.WriteLine("Não foi possível ler o arquivo");
	}
	------------------------------------------------------------------------------------------------------------------
	DESCARTES
	
		Quando queremos descartar um dos tipos dentro de um metodo com Tupla, podemos usar o underline ("_"), conforme o exemplo abaixo onde descarto o metodo quantidadeLinhas:
		
		LeituraArquivo arquivo = new LeituraArquivo();

		var (sucesso, linhasArquivo, _) = arquivo.LerArquivo("Arquivo/arquivoLeitura.txt");

		if(sucesso)
		{
			//Console.WriteLine("Quantidade de linhas do arquivo: " + quantidadeLinhas);
			foreach (string linha in linhasArquivo)
			{
				Console.WriteLine(linha);
			}
		}
		else
		{
			Console.WriteLine("Não foi possível ler o arquivo");
		}
		
	------------------------------------------------------------------------------------------------------------------

	DESCONSTRUTOR
	
			O Deconstrutor é um ação inversa ao meu Construtor , que vai construir o meu objeto e o Deconstrutor não vai destruir o meu objeto , mas sim separar de volta a minha construção, no sentido de separar os objetos. Por exemplo, se tenho uma classe com Nome e Sobrenome , eu posso separar essas informações em variaveis distintas umas das outras, semelhante igual eu faço com a Tupla.
			
						
			Vamos criar o Desconstruct em baixo do construtor Pessoa:
			
			 public void Deconstruct(out string nome, out string sobrenome)
			{
				nome = Nome;
				sobrenome = Sobrenome;
			}
			
			Na classe Program:
			
			Pessoa p1 = new Pessoa("William","Fontelas");
			
			(string nome, string sobrenome) = p1;

			Console.WriteLine($"{nome} {sobrenome}");
			
	------------------------------------------------------------------------------------------------------------------
	IF TERNÁRIO
	
		//uma sintaxe alternativa e mais enxuta para a instrução IF e ELSE
		//Uma alternativa do IF , onde o sinal de ? (if) e o : (else), somente quando tema um caso de if e else.
		
		int numero = 20;
		bool ehPar = false;

		//IF Ternário
		ehPar = numero % 2 == 0;
		Console.WriteLine($"O número {numero} é " + (ehPar ? "par" : "impar"));
		
		
		//a mesma coisa que o IF abaixo , com menos código 


		// int numero = 20;

		// if(numero % 2 == 0)
		// {
		//     Console.WriteLine($"O numero {numero} é par");
		// }
		// else
		// {
		//     Console.WriteLine($"O numero {numero} é impar");
		// }
		
	------------------------------------------------------------------------------------------------------------------		
			
			
			
			
			
			
			
			
			

		
			
		
		
	
	
	
	
	
	
	