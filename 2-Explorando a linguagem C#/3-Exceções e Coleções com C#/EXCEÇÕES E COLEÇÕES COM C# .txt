	-----------------------------------------------------------------------------------------------------------------
	***************************************** EXCEÇÕES E COLEÇÕES ***************************************************
	-----------------------------------------------------------------------------------------------------------------
	
	EXCEÇÕES (EXCEPTIONS)
	
	REALIZANDO A LEITURA DE UM ARQUIVO
	
	Vamos criar uma nova pasta e nomeá-lá de Arquivos, dentro dela vamos criar um arquivo arquivoLeitura.txt  e inserir algumas linhas
	
	Linha 1 do arquivo de leitura
	Linha 2 do arquivo de leitura - conteudo tal tal
	
	na classe Program:
	
	string[] linhas = File.ReadAllLines("Arquivos/arquivoLeitura.txt");

	foreach(string linha in linhas)
	{
	   Console.WriteLine(linha);
	}
	-----------------------------------------------------------------------------------------------------------------
	
	DISPARANDO UMA EXCEÇÃO
	
	A exceção quando disparada deixa uma trilha do que aconteceu , conhecida como stack trace, mostra o nome da exceção, alinha no código.
	-----------------------------------------------------------------------------------------------------------------
	
	TRATANDO UMA EXCEÇÃO
	
	Vamos englobar nosso código com o Try/catch
	
	-----------------------------------------------------------------------------------------------------------------
		
	
	EXCEÇÃO GENÉRICA E ESPECIFICA  E FINALLY
	
		try
		{
			string[] linhas = File.ReadAllLines("Arquivos/arquivo_Leitura.txt");

			foreach(string linha in linhas)
			{
				Console.WriteLine(linha);
			}
		}
		catch (FileNotFoundException ex)
		{
			Console.WriteLine($"Ocorreu um erro na leitura do arquivo. Arquivo não encontrado. {ex.Message}");
		}
		catch (DirectoryNotFoundException ex)
		{
			Console.WriteLine($"Ocorreu um erro na leitura do arquivo. Caminho da pasta não encontrado"
			+ ex.Message);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Ocorreu uma exceção genérica. {ex.Message}");
		}
		finally
		{
			Console.WriteLine("Chegou até aqui!");
		}
	--------------------------------------------------------------------------------------------------------------

	USANDO O THROW

		-Vamos criar uma nova classe ExemploExcecao na pasta Model
		
		-O throw vai jogar para o bloco acima até encontar um catch, ou lançar a exceção
		
			 public class ExemploExcecao
		{
			public void Metodo1()
			{
				try
				{
					Metodo2();
				}
				catch (Exception ex)
				{                
					Console.WriteLine("Exceção tratada!" + ex.Message);
				}
				
			}
			 public void Metodo2()
			{
				Metodo3();
			}
			 public void Metodo3()
			{
				Metodo4();
			}
			 public void Metodo4()
			{
				throw new Exception("Ocorreu yma exceção");
			}
		}
		
		Na classe Program:
		
		new ExemploExcecao().Metodo1();
		
	----------------------------------------------------------------------------------------------------------------
		
	INTRODUÇÃO A FILAS (QUEUE)
		
		Um tipo de coleção conhecido como fila(Queue)
		
		-O primeiro a Entrar é o primeiro a Sair (FIFO -First In First Out)
	---------------------------------------------------------------------------------------------------------------
	FILA NA PRÁTICA
		
		Queue<int> fila = new Queue<int>();

		fila.Enqueue(2);
		fila.Enqueue(4);
		fila.Enqueue(6);
		fila.Enqueue(8);

		foreach (int item in fila)
		{
			Console.WriteLine(item);
		}

		Console.WriteLine($"Removendo o elemento: {fila.Dequeue()}");
		//sempre vai remover o primeiro(FIFO)

		fila.Enqueue(10);

		foreach (int item in fila)
		{
			Console.WriteLine(item);
		}	
		
	-----------------------------------------------------------------------------------------------------------------
		
	INTRODUÇÃO A PILHAS(STACK)
	
		O primeiro a entrar é o ultimo a sair (LIFO -Last In First Out)
	----------------------------------------------------------------------------------------------------------------
	PILHA NA PRÁTICA
	
		Stack<int> pilha = new Stack<int>();

		pilha.Push(4);
		pilha.Push(6);
		pilha.Push(8);
		pilha.Push(10);

		foreach (int item in pilha)
		{
			Console.WriteLine(item);
		}

		Console.WriteLine($"Removendo o elemento do topo: {pilha.Pop()}");

		pilha.Push(20);

		foreach (int item in pilha)
		{
			Console.WriteLine(item);
		}	
	---------------------------------------------------------------------------------------------------------------

	INTRODUÇÃO DICTIONARY

		Representa um coleção de Chaves e Valores

		Dictionary<string, string> estados = new Dictionary<string, string>();

		estados.Add("SP", "São Paulo");
		estados.Add("BA", "Bahia");
		estados.Add("MG", "Minas Gerais");
		estados.Add("RJ", "Rio de Janeiro");

		foreach (var item in estados)
		{
			Console.WriteLine($"Chave: {item.Key}, Valor: {item.Value}");
		}
		
	----------------------------------------------------------------------------------------------------------------
	
	REMOVENDO E ALTERANDO ELEMENTOS
	
		Dictionary<string, string> estados = new Dictionary<string, string>();

		estados.Add("SP", "São Paulo");
		estados.Add("BA", "Bahia");
		estados.Add("MG", "Minas Gerais");
		estados.Add("RJ", "Rio de Janeiro");

		foreach (var item in estados)
		{
			Console.WriteLine($"Chave: {item.Key}, Valor: {item.Value}");
		}

		Console.WriteLine("------------------------------");

		estados.Remove("BA");
		estados["SP"] = "São Paulo - Valor Alterado";

		foreach (var item in estados)
		{
			Console.WriteLine($"Chave: {item.Key}, Valor: {item.Value}");
		}
		
		
		Verificando se o valor existe:
		
		
		string chave = "BA";
		
		Console.WriteLine($"Verificando o elemento: {chave}");

		if(estados.ContainsKey(chave))
		{
			Console.WriteLine($"Valor existente: {chave}");
		}
		else
		{
			Console.WriteLine($"Valor não existe. É seguro adicionar a chave: {chave}");
			
		}
		
		E para acessar um valor:

		Dictionary<string, string> estados = new Dictionary<string, string>();

		estados.Add("SP", "São Paulo");
		estados.Add("BA", "Bahia");
		estados.Add("MG", "Minas Gerais");
		estados.Add("RJ", "Rio de Janeiro");

		Console.WriteLine(estados["MG"]);	
				
		
	
	

		
		

			
		
		
	
	
	
	
	
	
	
	